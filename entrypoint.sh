#!/bin/sh

# Exit on any error
set -e

# === 1. Read Environment Variables ===
echo "Reading configuration from environment variables..."

# Mandatory variables
if [ -z "$EVE_VERSIONS" ]; then
    echo "Error: EVE_VERSIONS is a required environment variable. e.g. EVE_VERSIONS=\"14.5.1-lts,13.10.0\""
    exit 1
fi
if [ -z "$SERVER_IP" ]; then
    echo "Error: SERVER_IP is a required environment variable."
    exit 1
fi
if [ -z "$LISTEN_INTERFACE" ]; then
    echo "Error: LISTEN_INTERFACE is a required environment variable for Linux hosts (e.g. eth0)."
    exit 1
fi

# Optional variables with defaults
BOOT_MENU_TIMEOUT=${BOOT_MENU_TIMEOUT:="15"}
LOG_LEVEL=${LOG_LEVEL:="info"}
DHCP_MODE=${DHCP_MODE:="proxy"}
PRIMARY_DHCP_IP=${PRIMARY_DHCP_IP:=""}
DHCP_RANGE_START=${DHCP_RANGE_START:=""}
DHCP_RANGE_END=${DHCP_RANGE_END:=""}
DHCP_SUBNET_MASK=${DHCP_SUBNET_MASK:="255.255.255.0"}
DHCP_ROUTER=${DHCP_ROUTER:=""}

echo "iPXE Server IP configured to: ${SERVER_IP}"
echo "Listening on interface: ${LISTEN_INTERFACE}"

# === 2. Setup Caching and Asset Directories ===
echo "Setting up asset and cache directories..."
mkdir -p /data/httpboot /data/downloads /tftpboot

# Convert comma-separated string to list for the loop
OLD_IFS=$IFS
IFS=','

for version in $EVE_VERSIONS; do
    echo "---"
    if [ ! -d "/data/httpboot/${version}" ]; then
        echo "Version ${version} not found in cache. Downloading..."
        EVE_TAR_URL="https://github.com/lf-edge/eve/releases/download/${version}/amd64.kvm.generic.installer-net.tar"
        curl -L -o "/data/downloads/netboot-${version}.tar" "${EVE_TAR_URL}"
        
        echo "Extracting assets for version ${version}..."
        mkdir -p "/data/httpboot/${version}"
        tar -xvf "/data/downloads/netboot-${version}.tar" -C "/data/httpboot/${version}"
        rm "/data/downloads/netboot-${version}.tar"
    else
        echo "Version ${version} found in cache. Skipping download."
    fi
    # Always copy the bootloader for the first/default version
    if [ -z "$DEFAULT_VERSION" ]; then
        DEFAULT_VERSION=$version
        echo "Copying iPXE bootloader from default version ${DEFAULT_VERSION}..."
        cp "/data/httpboot/${DEFAULT_VERSION}/ipxe.efi" /tftpboot/ipxe.efi
    fi
done
IFS=$OLD_IFS
echo "---"

# === 3. Generate dnsmasq.conf ===
echo "Generating dnsmasq configuration (Mode: ${DHCP_MODE})..."

cat > /etc/dnsmasq.conf <<-"EOF"
# Configuration generated by entrypoint.sh
port=0
interface=${LISTEN_INTERFACE}
bind-interfaces
enable-tftp
tftp-root=/tftpboot
dhcp-boot=boot.ipxe
EOF

if [ "$DHCP_MODE" = "standalone" ]; then
    echo "Configuring standalone DHCP mode..."
    if [ -z "$DHCP_RANGE_START" ] || [ -z "$DHCP_RANGE_END" ] || [ -z "$DHCP_ROUTER" ]; then
        echo "Error: For DHCP_MODE=standalone, you must set DHCP_RANGE_START, DHCP_RANGE_END, and DHCP_ROUTER."
        exit 1
    fi
    echo "dhcp-range=${DHCP_RANGE_START},${DHCP_RANGE_END},${DHCP_SUBNET_MASK},12h" >> /etc/dnsmasq.conf
    echo "dhcp-option=option:router,${DHCP_ROUTER}" >> /etc/dnsmasq.conf
elif [ "$DHCP_MODE" = "proxy" ]; then
    echo "Configuring proxy DHCP mode..."
    PROXY_IP_ARG=""
    if [ -n "$PRIMARY_DHCP_IP" ]; then
        PROXY_IP_ARG=",${PRIMARY_DHCP_IP}"
    fi
    echo "dhcp-range=${SERVER_IP},proxy${PROXY_IP_ARG}" >> /etc/dnsmasq.conf
else
    echo "Error: Invalid DHCP_MODE specified. Must be 'proxy' or 'standalone'."
    exit 1
fi

if [ "$LOG_LEVEL" = "debug" ]; then
    echo "log-queries" >> /etc/dnsmasq.conf
    echo "log-dhcp" >> /etc/dnsmasq.conf
fi

# === 4. Generate Root iPXE Menu Script ===
echo "Generating iPXE boot menu..."

cat > /tftpboot/boot.ipxe <<-"EOF"
#!ipxe

menu EVE-OS Version Selection

EOF

item_num=1
OLD_IFS=$IFS
IFS=','
for version in $EVE_VERSIONS; do
    echo "item eve_${item_num} Install EVE-OS ${version}" >> /tftpboot/boot.ipxe
    item_num=$((item_num+1))
done
IFS=$OLD_IFS

cat >> /tftpboot/boot.ipxe <<-"EOF"

item --gap -- ------------------------------------------
item shell Drop to iPXE shell
item reboot Reboot computer

choose --timeout ${BOOT_MENU_TIMEOUT}000 --default eve_1 selected
goto 
EOF

item_num=1
OLD_IFS=$IFS
IFS=','
for version in $EVE_VERSIONS; do
    echo ":eve_${item_num}" >> /tftpboot/boot.ipxe
    echo "chain http://${SERVER_IP}/${version}/ipxe.efi.cfg || goto failed" >> /tftpboot/boot.ipxe
    item_num=$((item_num+1))
done
IFS=$OLD_IFS

cat >> /tftpboot/boot.ipxe <<-"EOF"

:shell
shell
goto start

:reboot
reboot

:failed
echo Boot failed, returning to menu in 5 seconds...
sleep 5
goto start

EOF

# TEMPORARY DEBUG: Do not start services, just print config and exit
echo "---"
echo "Contents of /etc/dnsmasq.conf:"
cat /etc/dnsmasq.conf
exit 0
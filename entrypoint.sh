#!/bin/sh
# Exit on any error
set -e

# === 1. Read Environment Variables ===
echo "Reading configuration from environment variables..."

# Mandatory variables
if [ -z "$EVE_VERSIONS" ]; then
    echo "Error: EVE_VERSIONS is a required environment variable. e.g. EVE_VERSIONS=\"14.5.1-lts,13.10.0\""
    exit 1
fi
if [ -z "$SERVER_IP" ]; then
    echo "Error: SERVER_IP is a required environment variable."
    exit 1
fi
if [ -z "$LISTEN_INTERFACE" ]; then
    echo "Error: LISTEN_INTERFACE is a required environment variable for Linux hosts (e.g. eth0)."
    exit 1
fi

# Optional variables with defaults
BOOT_MENU_TIMEOUT=${BOOT_MENU_TIMEOUT:="15"}
LOG_LEVEL=${LOG_LEVEL:="info"}
DHCP_MODE=${DHCP_MODE:="proxy"}
PRIMARY_DHCP_IP=${PRIMARY_DHCP_IP:=""}
DHCP_RANGE_START=${DHCP_RANGE_START:=""}
DHCP_RANGE_END=${DHCP_RANGE_END:=""}
DHCP_SUBNET_MASK=${DHCP_SUBNET_MASK:="255.255.255.0"}
DHCP_ROUTER=${DHCP_ROUTER:=""}
DHCP_DOMAIN_NAME=${DHCP_DOMAIN_NAME:=""}
DHCP_BROADCAST_ADDRESS=${DHCP_BROADCAST_ADDRESS:=""}

echo "iPXE Server IP configured to: ${SERVER_IP}"
echo "Listening on interface: ${LISTEN_INTERFACE}"

# === 2. Setup Caching and Asset Directories ===
echo "Setting up asset and cache directories..."
mkdir -p /data/httpboot /data/downloads /tftpboot

# Convert comma-separated string to list for the loop
OLD_IFS=$IFS
IFS=','

for version in $EVE_VERSIONS; do
    echo "---"
    if [ ! -d "/data/httpboot/${version}" ]; then
        echo "Version ${version} not found in cache. Downloading..."
        EVE_TAR_URL="https://github.com/lf-edge/eve/releases/download/${version}/amd64.kvm.generic.installer-net.tar"
        curl -L -o "/data/downloads/netboot-${version}.tar" "${EVE_TAR_URL}"

        echo "Extracting assets for version ${version}..."
        mkdir -p "/data/httpboot/${version}"
        tar -xvf "/data/downloads/netboot-${version}.tar" -C "/data/httpboot/${version}/"
        rm "/data/downloads/netboot-${version}.tar"
    else
        echo "Version ${version} found in cache. Skipping download."
    fi
    # Always copy the bootloader for the first/default version
    if [ -z "$DEFAULT_VERSION" ]; then
        DEFAULT_VERSION=$version
        echo "Copying iPXE bootloader from default version ${DEFAULT_VERSION}..."
        cp "/data/httpboot/${DEFAULT_VERSION}/ipxe.efi" /tftpboot/ipxe.efi
    fi
    # Inject correct URL into ipxe.efi.cfg
    echo "Injecting URL into ipxe.efi.cfg... 'set url http://${SERVER_IP}/${version}/'"
    # Use sed to handle both commented and uncommented versions with proper spacing
    # Update ipxe.efi.cfg with DHCP and server configuration
    sed -i "1i#!ipxe\\nset net0/next-server ${SERVER_IP}\\ndhcp\\n" "/data/httpboot/${version}/ipxe.efi.cfg"
    sed -i "s|^#\s*set url.*|set url http://${SERVER_IP}/${version}/|; s|^\s*set url.*|set url http://${SERVER_IP}/${version}/|" "/data/httpboot/${version}/ipxe.efi.cfg"

    # Verify URL injection
    echo "Verifying URL injection..."
    if ! grep -q "^set url http://${SERVER_IP}/${version}/" "/data/httpboot/${version}/ipxe.efi.cfg"; then
        echo "Warning: URL injection may have failed for version ${version}. Please verify the configuration."
        echo "Current 'set url' line in ipxe.efi.cfg:"
        grep "set url" "/data/httpboot/${version}/ipxe.efi.cfg" || echo "No 'set url' line found!"
    else
        echo "URL successfully injected for version ${version}"
    fi

done
IFS=$OLD_IFS
echo "---"

# === 3. Generate dnsmasq.conf ===
echo "Generating dnsmasq configuration (Mode: ${DHCP_MODE})..."

# Use explicit echo commands to ensure variable expansion
echo "# Configuration generated by entrypoint.sh" > /etc/dnsmasq.conf
echo "port=0" >> /etc/dnsmasq.conf
echo "interface=${LISTEN_INTERFACE}" >> /etc/dnsmasq.conf
echo "bind-interfaces" >> /etc/dnsmasq.conf
echo "enable-tftp" >> /etc/dnsmasq.conf
echo "tftp-root=/tftpboot" >> /etc/dnsmasq.conf

# Architecture detection for BIOS vs UEFI
echo "dhcp-match=set:bios,option:client-arch,0" >> /etc/dnsmasq.conf
echo "dhcp-match=set:efi32,option:client-arch,6" >> /etc/dnsmasq.conf
echo "dhcp-match=set:efi64,option:client-arch,7" >> /etc/dnsmasq.conf
echo "dhcp-match=set:efi64,option:client-arch,9" >> /etc/dnsmasq.conf

# iPXE detection - option 175 is sent by iPXE clients
echo "dhcp-match=set:ipxe,175" >> /etc/dnsmasq.conf

# Boot configuration for different architectures
# BIOS clients get undionly.kpxe, UEFI clients get ipxe.efi
echo "dhcp-boot=tag:bios,tag:!ipxe,undionly.kpxe,,${SERVER_IP}" >> /etc/dnsmasq.conf
echo "dhcp-boot=tag:efi32,tag:!ipxe,ipxe.efi,,${SERVER_IP}" >> /etc/dnsmasq.conf
echo "dhcp-boot=tag:efi64,tag:!ipxe,ipxe.efi,,${SERVER_IP}" >> /etc/dnsmasq.conf

# Once iPXE is loaded, serve the boot script directly via TFTP
echo "dhcp-boot=tag:ipxe,autoexec.ipxe,,${SERVER_IP}" >> /etc/dnsmasq.conf

# Set next-server explicitly for all requests
echo "dhcp-option=next-server,${SERVER_IP}" >> /etc/dnsmasq.conf

# PXE service configuration for proxy DHCP
echo "pxe-service=tag:bios,x86PC,\"EVE-OS Network Boot\",undionly.kpxe,${SERVER_IP}" >> /etc/dnsmasq.conf
echo "pxe-service=tag:efi32,IA32_EFI,\"EVE-OS Network Boot\",ipxe.efi,${SERVER_IP}" >> /etc/dnsmasq.conf
echo "pxe-service=tag:efi64,X86-64_EFI,\"EVE-OS Network Boot\",ipxe.efi,${SERVER_IP}" >> /etc/dnsmasq.conf

# TFTP configuration
echo "tftp-no-blocksize" >> /etc/dnsmasq.conf

if [ "$DHCP_MODE" = "standalone" ]; then
    echo "Configuring standalone DHCP mode..."
    if [ -z "$DHCP_RANGE_START" ] || [ -z "$DHCP_RANGE_END" ] || [ -z "$DHCP_ROUTER" ]; then
        echo "Error: For DHCP_MODE=standalone, you must set DHCP_RANGE_START, DHCP_RANGE_END, and DHCP_ROUTER."
        exit 1
    fi
    echo "dhcp-range=${DHCP_RANGE_START},${DHCP_RANGE_END},${DHCP_SUBNET_MASK},12h" >> /etc/dnsmasq.conf
    echo "dhcp-option=option:router,${DHCP_ROUTER}" >> /etc/dnsmasq.conf
elif [ "$DHCP_MODE" = "proxy" ]; then
    echo "Configuring proxy DHCP mode..."
    # Calculate network address for proxy DHCP
    NETWORK_ADDRESS=$(echo ${SERVER_IP} | awk -F. '{print $1"."$2"."$3".0"}')
    echo "dhcp-range=${NETWORK_ADDRESS},proxy,${DHCP_SUBNET_MASK}" >> /etc/dnsmasq.conf
    if [ -n "$DHCP_ROUTER" ]; then
        echo "dhcp-option=3,${DHCP_ROUTER}" >> /etc/dnsmasq.conf
    fi
    if [ -n "$DHCP_DOMAIN_NAME" ]; then
        echo "dhcp-option=15,${DHCP_DOMAIN_NAME}" >> /etc/dnsmasq.conf
    fi
    if [ -n "$DHCP_BROADCAST_ADDRESS" ]; then
        echo "dhcp-option=28,${DHCP_BROADCAST_ADDRESS}" >> /etc/dnsmasq.conf
    fi
else
    echo "Error: Invalid DHCP_MODE specified. Must be 'proxy' or 'standalone'."
    exit 1
fi

if [ "$LOG_LEVEL" = "debug" ]; then
    echo "log-queries" >> /etc/dnsmasq.conf
    echo "log-dhcp" >> /etc/dnsmasq.conf
fi

# === 4. Generate Root iPXE Menu Script ===
echo "Generating iPXE boot menu..."

cat > /tftpboot/boot.ipxe <<- EOF
#!ipxe

# Set TFTP server explicitly
set next-server ${SERVER_IP}
set filename ipxe.efi.cfg

:start
menu EVE-OS Version Selection

EOF

item_num=1
OLD_IFS=$IFS
IFS=','
for version in $EVE_VERSIONS; do
    echo "item eve_${item_num} Install EVE-OS ${version}" >> /tftpboot/boot.ipxe
    item_num=$((item_num+1))
done
IFS=$OLD_IFS

cat >> /tftpboot/boot.ipxe <<- EOF

item --gap -- ------------------------------------------
item shell Drop to iPXE shell
item reboot Reboot computer

choose --timeout ${BOOT_MENU_TIMEOUT}000 --default eve_1 selected || goto start
goto \${selected}

EOF

item_num=1
OLD_IFS=$IFS
IFS=','
for version in $EVE_VERSIONS; do
    echo ":eve_${item_num}" >> /tftpboot/boot.ipxe
    echo "chain http://${SERVER_IP}/${version}/ipxe.efi.cfg || goto failed" >> /tftpboot/boot.ipxe
    item_num=$((item_num+1))
done
IFS=$OLD_IFS

cat >> /tftpboot/boot.ipxe <<- EOF

:shell
shell
goto start

:reboot
reboot

:failed
echo Boot failed, returning to menu in 5 seconds...
sleep 5
goto start

EOF

# Copy boot.ipxe to autoexec.ipxe for fallback
cp /tftpboot/boot.ipxe /tftpboot/autoexec.ipxe

# === 5. Add missing bootloaders ===
echo "Downloading iPXE bootloaders..."

# Download undionly.kpxe for BIOS clients if not present
if [ ! -f "/tftpboot/undionly.kpxe" ]; then
    echo "Downloading undionly.kpxe for BIOS clients..."
    curl -L -o /tftpboot/undionly.kpxe "https://boot.ipxe.org/undionly.kpxe"
fi

# Ensure ipxe.efi is available
if [ ! -f "/tftpboot/ipxe.efi" ] && [ -n "$DEFAULT_VERSION" ]; then
    echo "Copying ipxe.efi from EVE assets..."
    cp "/data/httpboot/${DEFAULT_VERSION}/ipxe.efi" /tftpboot/ipxe.efi
fi

# === 6. Start Services ===
echo "Starting nginx..."
nginx

echo "Starting dnsmasq..."
dnsmasq --no-daemon

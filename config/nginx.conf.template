worker_processes 1;

error_log /dev/stdout debug;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    # Configure MIME types for iPXE and boot files
    types {
        application/x-ipxe      ipxe;
        application/x-pxeboot   efi;
    }
    sendfile      on;
    keepalive_timeout 65;
    
    # Enhanced logging format
    log_format  debug_fmt  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'fs_path="$request_filename" '
                      'conn="$connection" '
                      'host="$host" '
                      'scheme="$scheme" '
                      'req_length="$request_length" '
                      'resp_time="$request_time" '
                      'bytes_sent="$bytes_sent" '
                      'req_body="$request_body" '
                      'http_accept="$http_accept"';
    
    access_log /dev/stdout debug_fmt;
    
    # Debug settings
    error_log /dev/stdout debug;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        root /data/httpboot;
        index boot.ipxe;
        
        # Basic configuration
        autoindex on;
        autoindex_exact_size off;
        access_log /dev/stdout debug_fmt;
        error_log /dev/stdout debug;

        # Disable caching globally
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Access-Control-Allow-Origin * always;

        location = /debug {
            add_header Content-Type text/plain;
            return 200 'Server Config:
  Document Root: $document_root
  Request Path: $request_filename
  URI: $uri
  Remote Addr: $remote_addr
  Server Protocol: $server_protocol
  Request Method: $request_method
  Host: $host
';
        }

        # Static files served from /data/httpboot
        # .ipxe content type is handled by the global 'types' mapping above

        location / {
            try_files $uri $uri/ =404;
            autoindex on;
            autoindex_exact_size off;
        }
        
        # Special handling for /latest/
        location ^~ /latest/ {
            alias /data/httpboot/latest/;
            autoindex on;
        }
        
        # Handle iPXE files (case-insensitive extensions)
        location ~* \.ipxe$ {
            default_type application/x-ipxe;
            add_header Content-Type application/x-ipxe always;
            add_header Content-Length $content_length always;
            expires -1;
            tcp_nodelay on;
            keepalive_timeout 60;
        }
        
        # Handle EFI binaries (case-insensitive for .efi/.EFI)
        location ~* \.efi$ {
            default_type application/x-pxeboot;
            add_header Content-Type application/x-pxeboot always;
            add_header Content-Length $content_length always;
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 300;
            client_max_body_size 0;
            client_body_timeout 300;
            send_timeout 300;
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Handle iPXE cfg files (case-insensitive)
        location ~* \.cfg$ {
            default_type application/octet-stream;
            add_header Content-Type application/octet-stream always;
            add_header Content-Length $content_length always;
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 300;
            client_max_body_size 0;
            client_body_timeout 300;
            send_timeout 300;
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Handle other boot files (images, ISOs) case-insensitively
        location ~* \.(img|iso)$ {
            default_type application/octet-stream;
            add_header Content-Type application/octet-stream always;
            add_header Content-Length $content_length always;
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 300;
            client_max_body_size 0;
            client_body_timeout 300;
            send_timeout 300;
        }
    }
}
